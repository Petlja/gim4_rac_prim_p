Криптографија
=============

Основни појмови
---------------

Криптографију за почетак можемо да дефиишемо као науку, која се бави методима очувања тајности 
информација. Потреба за записивањем порука тако да може да их прочита смо онај коме су намењене 
постоји скоро једнако дуго као и само писмо. Први масовно познати примери се односе на употребу 
криптографије у војне сврхе. Војсковође су међусобно размењивале поруке преко курира, али да план 
не би био откривен у случају да курура ухвати непријатељ, било је важно да непријатељ не може да 
протумачи поруку. Зато је било потребно да се порука пре слања криптује (шифрује) а да се по 
пријему декриптује (дешифрује). 

На пример, велики војсковођа Цезар је користио криптовање које се и данас зове по њему (Цезаров 
кôд), а које се састоји у томе да се свако слово поруке помери за неки унапред договорени број 
места у абецеди.
        
|

**Пример - Цезаров кôд**

Рецимо да је договор да се при криптовању поруке свако слово помера за три места у абецеди. 
У латинском језику су коришћена ова 23 слова: 
``A, B, C, D, E, F, G, H, I, K, L, M, N, O, P, Q, R, S, T, V, X, Y, Z``. Напишимо испод сваког 
од тих слова оно које се добија померањем за три места:

| ``A B C D E F G H I K L M N O P Q R S T V X Y Z``
| ``D E F G H I K L M N O P Q R S T V X Y Z A B C``

Видимо да се нпр. слово ``E`` криптовањем пресликава у слово ``H``, а слово ``Z`` у слово ``C``.
Нека је порука "EGO FLUMEN TRANSIRE" (прелазим реку). Криптовањем слово по слово, добили бисмо 
шифрат (криптовани текст) "HKR IOCPHQ YVDQXMVH". Овај шифрат можемо да декриптујемо померањем 
сваког слова за 20 места у абецеди (објасни зашто).

Испробајте криптовање ове, или неке друге поруке у следећем програму:

.. activecode:: cezarov_kod_program

    rimska_abededa = 'ABCDEFGHIKLMNOPQRSTVXYZ'
    br_slova = len(rimska_abededa)

    def kriptuj(poruka, pomeraj):
        sifrat = []
        for slovo in poruka:
            if slovo == ' ':
                sifrat.append(' ')
            else:
                poz = rimska_abededa.find(slovo)
                kriptovano_slovo = rimska_abededa[(poz+pomeraj) % br_slova]
                sifrat.append(kriptovano_slovo)
        return ''.join(sifrat)

    poruka = input('Унеси поруку великим словима: ')
    print('Шифрат је')
    print(kriptuj(poruka, 3))

.. topic:: Криптовање и кодирање
    
    Често се уместо речи криптовање и декриптовање (декрипција) користе познатије речи кодирање и 
    декодирање, мада оне данас имају нешто другачије значење. Наиме, кодирање више не подразумева 
    намеру да неки садржај учинимо читљивим само за одређене особе, него да тај садржај запишемо на 
    другачији начин, најчешће из техничких разлога. Тако на пример, да бисмо могли да чувамо текстове 
    и слике у рачунару, потребно је да те текстове и слике кодирамо помоћу бројева. На сличан начин 
    је некад коришћен Морзеов код, а данас користимо бар кодове на производима које купујемо, или QR 
    кодове, који нас најчешће воде ка одређеним веб странама. При томе су правила за кодирање и 
    декорирање у свим овим случајвема позната јавности и масовно коришћена.
    
У цезарово време, када је ретко ко био и писмен, ово је било више него довољно да спречи непријатеља 
да прочита и разуме поруку. Данас би овакав начин криптовања био прилично наиван и могао би да послужи 
само као вежба за почетнике у разбијању шифре. Без обзира на то, овај пример ће нам послужити да 
поступак енкрипције сагледамо мало формалније.

|

**Криптовање као математичка функција** 

Криптовањем називамо поступак (алгоритам), којим се отворени текст пресликава (мапира) у нечитљив 
низ симбола, који називамо *шифрат*. У математици се уместо речи пресликавање или мапирање користи 
реч функција. Дакле, можемо да кажемо да је криптовање математичка функција :math:`F`, која 
пресликава отворени текст :math:`P` у шифрат :math:`S`, или кратко: :math:`F: P \to S`. Функција 
:math:`F` очигледно мора да буде бијекција, тј. обострано једнозначно ("1-1") пресликавање. Другим 
речима, функција мора да буде таква да сваки шифрат може једнозначно да се декриптује у полазни 
текст. Када тако посматрамо ствари, *декриптовање* није ништа друго него примена инверзне функције 
(инверзног пресликавања) :math:`F^{-1}`, које шифрат пресликава у полазни текст. Дакле, ако је 
:math:`F(P)=S`, онда :math:`F^{-1}(S)=P`.

|

**Појам кључа** 

Да би функција :math:`F` која криптује текст била тежа за откривање, она често користи један или више 
параметара. На пример, у криптовању Цезаровом шифром, функција користи померај слова за одређени број 
места. Тај број места је параметар поступка енкрипције, однсно функције :math:`F`. Ми смо користили 
вредност параметра 3. При слању следеће поруке параметар би могао да има вредност 5 или било коју 
другу вредност. Такве промене отежавају посао *криптоаналитичару*, који покушава да открије поступак 
декриптовања. Употреба параметра нам у неким случајевима омогућава да, чак и када је сам поступак 
енкрипције откривен, променом вредности кључа и даље обезбеђујемо тајност (о томе више касније).

У општем случају, у било ком поступку енкрипције података, вредност параметра енкрипције зовемо 
*кључ* и обично га означавамо словом :math:`e`. Поступак декрипције може да буде исти као код 
енкрипције, али са другом вредношћу параметра, а може да буде и сасвим другачији. У случају Цезарове 
шифре користи се исти поступак, само је вредност параметра-кључа једнака :math:`23-e`, јер је римска 
абецеда имала 23 слова. Вредност кључа који се користи у декрипцији (дешифровању) означавамо словом 
:math:`d`.

.. image:: ../../_images/kriptografija.png
    :width: 600px
    :align: center

Данас је уобичајено да се за енкрипцију и декрипцију користи исти поступак, а да се разликује само 
вредност кључа, а у неким применама ни то. Ако се при енкрипцији и декрипцији користи исти кључ, реч 
је о симетричној енкрипцији, а ако се користе различити кључеви, енкрипција је асиметрична. Предност 
симетричне енкрипције је њена једноставност, али проблем је достављање заједничког кључа другој страни. 
Наиме, ако би кључ био пресретнут, поступак би био компромитован и онај ко касније прислушкује или 
пресреће криптоване поруке, са лакоћом би могао да их декриптује. Зато се симетрична енкрипција више 
не користи толико у комуникацији, већ више за чување текста и других података у облику који није 
читљив другима.

Можда сте се запитали како употреба различитих кључева решава проблем достављања кључа. Наиме, ако 
је познат поступак и кључ за енкрипцију :math:`e`, онда кључ за декрипцију :math:`d` може да се 
израчуна. То значи да би познавање једног од ова два кључа омогућило да се открије и други. Ускоро 
ћемо видети да то не мора да буде тако.

Криптографија данас
-------------------

Током векова, криптографија је напредовала као наука, нарочито са развојем математике, а током 
последњих неколико деценија и рачунарства. Методе које се користе у криптографији су постале 
много напредније, а њена примена је ушла у многе области људског деловања. Криптографија одавно 
није тема само војних, безбедносних и дипломатских служби, она се широко примењује у електронском 
пословању, финансијама, трговини и дтд. Чак и појединци могу да искористе криптографију за личне 
потребе, нпр. тако што при архивирању података поставе лозинку на архиву.

У савременом друштву, од криптографије се више не очекује да обезбеди само тајност информација, јер 
је у међувремену уочено да криптографија може врло корисно да послужи и у друге сврхе. 

Задаци савремене криптографије су да обезбеди:

- Тајност информација (енгл. *confidentiality* - поверљивост) 
- Веродостојност информација (енгл. *data integrity* - интегритет података)
- Проверу идентитета (енгл. autentification)
- Немогућност избегавања одговорности (енгл: *non-repudiation* - непорицање) 

**Обезбеђивање тајности** информација значи да је садржај информације доступан само овлашћеним лицима, 
односно само онима који поседују кључ за декрипцију. Да би се криптосистем сматрао безбедним, важно 
је да нападач (криптоаналитичар) не може да декриптује информације без кључа. Криптографија обезбеђује 
тајност помоћу различитих математичких алгоритама, о којима ће бити речи у наставку.

**Да би се обезбедила веродостојност** информација које се криптују, треба спречити да дође до 
неовлашћене промене информација (преправљање, брисање, или подметање друге информације). Другим 
речима, потребно је да постоји начин да се провери да ли је информација промењена након њеног 
настанка. И ово се постиже одређеним алгоритмима, које ћемо ускоро описати.

**Провера идентитета** подразумева да учесници у комуникацији треба да докажу свој идентитет (да 
се представе на проверљив начин) пре него што започну размену информација.

**Немогућност избегавања одговорности** се састоји у томе да лице које да пристанак на нешто (нпр. 
изда чек или потпише уговор) не може касније да порекне свој пристанак, тврдећи да је у питању 
фалсификат. Један од начина да се помоћу криптографије обезбеди непорицање је упортеба дигиталног 
потписа.
