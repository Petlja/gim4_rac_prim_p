Мaшинско учење
==============

.. reveal:: ML_button
    :showtitle: Из просветног гласника
    :hidetitle: Сакриј текст из просветног гласника

    На почетку изучавања ове теме требало би да наставник илуструје на примерима из свакодневног живота где се све данас могу
    срести примери машинског учења: препознавање лица (енгл. face recognition), препознавање говора (енгл. speech recognition), 
    аутоматско превођење (нпр. google translate), виртуелни асистенти (нпр. Сири, Алекса, Гугл-асистент) итд. Илустровати машинско
    учење на примерима. При излиставању примера повезати вертикално и међупредметно са питањем безбедности и приватности
    (препознавање лица на друштвеним мрежама, питања приватности, безбедности, утицаја технологије на промену начина обављања послова, 
    друштвених односа уопште).

    Објаснити концепт машинског учења као област рачунарства која се бави програмирањем рачунара да „доносе одлуке на основу
    искуства”. Објаснити везу између појмова машинског учења и вештачке интелигенције. Навести фазе у процесу машинског учења
    (прикупљање података, припремa података, избор атрибута, моделовање, евалуација и на крају употреба), и објаснити структуру
    употребе прикупљених података (тренинг, валидација и тестирање). Нагласити важност избора модела података као и типа алгоритма 
    (надгледано и ненадгледано учење у зависности од тога да ли су подаци за тренирање обележени или не).

    Објаснити на једном истом примеру надгледано и ненадгледано учење:

    **Надгледано учење**

    Да бисмо продали што више половних аутомобила треба да креирамо апликацију која може да процени цену аута на
    основу више параметра: произвођач, старост, пређена километража... Крећемо од већ постојећих познатих података за
    аутомобиле који су тренутно у продаји при чему знамо и
    њихове цене. Све те параметри као тренинг податке користи алгоритам за машинско учење, при чему се долази до
    математичких операција које дају смисао свим подацима,
    односно доводе до цене.

    **Ненадгледано учење**

    Други случај је када имамо све тренинг податке, али немамо тражену цену сваког аутомобила. За исте податке се
    креира алгоритам који аутоматски идентификује различите
    тржишне сегменте међу подацима и издваја неке математичке правилности које повезују дате податке.

Шта је машинско учење
---------------------

**Начини задавања проблема**

Када неки проблем желимо да решимо помоћу рачунара, најпре је потребно да тај проблем на неки 
начин опишемо (прецизирамо, задамо). Код једноставнијих проблема уобичајено је да се прецизно 
формулише на који начин излаз зависи од улаза, а затим да се на основу те формулације напише 
програм који решава проблем. Међутим, код веома сложених проблема овај приступ је непрактичан, 
или чак немогућ. На пример, проблеми препознавања говора, рачунарског вида (као што су препознавање 
оболења на медицинским снимцима, детекција и препознавање лица, гестова, покрета), превођења 
текста са језика на језик, управљања роботима или аутомобилима итд. су врло незгодни за формално 
описивање. Тешкоће у описивању често потичу од мноштва посебних случајева, због којих су правила 
или сувише компликована, или нису ни позната. У случајевима када зависност излаза од улаза 
не можемо да опишемо експлицитно, проблем може да се опише великим бројем примера. Овакав, 
имплицитан опис проблема је знатно теже искористити за добијање квалитетног решења проблема, али  
то је следећа најбоља ствар коју можемо да урадимо. Према томе, описивању проблема помоћу примера 
прибегавамо само када немамо избора, јер експлицитно описан проблем може ефикасније да се решава 
директно, поузадним и разрађеним методама програмирања.


**Појам и процес машинског учења**

Машинско учење можемо да дефинишемо као област вештачке интелигенције, која се бави решавањем 
проблема описаних помоћу примера. Предмет проучавања машинског учења су алгоритми који кроз 
интензивну анализу великог броја података могу да препознају одређене обрасце у тим подацима 
и на основу тога касније доносе одлуке без, или уз минималну људску интервенцију.

Процес машинског учења одвија се у више фаза. Након прецизирања опсега проблема (енгл. problem scope 
- одређујемо шта спада у проблем који решавамо, а шта не) и прикупљања података, потребно је одбацити 
нерелевантне и неисправне податке, а боље се упознати са особинама података који ће бити употребљени. 
Полазни подаци могу да буду било каквог типа (слика, текст, аудио итд, као и разне комбинације типова), 
па је потребно одредити које нумеричке карактеристике података су најпогодније за представљање тих 
података систему за учење. Истина је да се подаци било ког типа у рачунару коначно своде на бројеве, 
али начин на који се подаци стандардно кодирају не мора да буде и најпогоднији облик за учење. 
Потребно је, дакле, одредити нека нумеричка својства (енгл. features) датих података, којима ће ти 
подаци да буду представљени у систему за учење. Након трансформације изворних података у низове 
поменутих својстава (енгл. feature vectors), наступа следећа фаза, а то је **тренинг**. У току те 
фазе систем нешто учи из доступних података. Зависно од вида машинског учења (види ниже), циљ учења 
може да буде проналажење сличног раније виђеног податка, проналажење категорије (класе) којој припада 
податак, избор најбољег понашања за ситуацију описану улазним податком и слично. Подаци којима се 
систем за учење излаже током тог процеса чине такозвани скуп података за тренинг (енгл. training set). 
Резултат фазе учења, односно тренинга називамо **аналитички модел**, или краће - модел. Аналитички 
модел се типично налази у једном бинарном фајлу, у формату специфичном за дати начин учења и дати 
проблем у коме се модел примењује. У том фајлу се налазе разни нумерички коефицијенти израчунати 
током тренинга. Тренинг система за машинско учење не треба схватати као једнократан посао, јер 
генерисани модел из разних разлога може да не буде довољно квалитетан. Зато је често након тестирања 
модела и детаљнијег испитивања његовог квалитета потребно да се промене нека подешавања тренинга, 
или да се скуп података за учење прочисти или допуни, а затим да се тренинг покрене поново. Може да 
буде потребно да се ови кораци понове велики број пута док се не дође до модела задовољавајућег 
квалитета. Када се добије задовољавајући модел, наступа фаза **употребе модела** (експлоатације), 
током које други програм користи генерисани модел, односно коефицијенте садржане у њему. Овај 
други програм решава полазни проблем тако што извршава неки унапред припремљен поступак над новим 
улазним подацима (сличним онима из скупа за тренинг), користећи коефицијенте из модела као параметре.

**Неке карактеристике машинског учења**

Врста закључивања која се дешава у системима за машинско учење је индуктивно закључивање, од 
(многобројних) појединачних примера ка општим правилима. За ову врсту закључивања ни код људи 
нема гаранције да се применом закључака или изведених правила у сваком појединачном случају добија 
исправан, или најбољи одговор. Циљ је пре свега да се дође до правила које важи у што већем броју 
случајева. Тако се ни од система за машинско учење не очекује да буду у потпуности тачни, тј. да 
генеришу идеалан модел, тим пре што примери на којим систем учи могу да буду и делимично погрешни 
(тј. да садрже шум), да не буду потпуно конзистентни (ни људски експерти се не слажу у свему у 
потпуности), или недовољно комплетни (да не покривају у потребној мери све значајне случајеве, тј. 
да нису репрезентативни). Због тога се и квалитет система за машинско учење, односно добијеног 
аналитичког модела оцењује само статистички. То значи да се мера квалитета модела добија тестирањем 
на неком скупу података, који је по формату исти као и подаци за тренинг, али који није био доступан 
систему за учење током тренинга, тј. генерисања модела. Квалитет модела може, на пример, да се 
изрази у виду процентуланих учесталости прављења одређених врста грешака (ово зависи од вида учења 
о коме је реч).

Кључна улога тестирања модела је да се верификује да је тренинг обављен на задовољавајући начин, 
односно да укаже на могуће принципијелне пропусте током тренинга, или слаб општи квалитет. Као 
што смо поменули, принципијелни проспусти могу да се отклоне или ублаже другачијим подешавањем 
тренинга, или прочишћавањем и обогаћивањем скупа података за тренинг. 
Осим тога, тестирање може да послужи и за поређење више релативно квалитетниих модела, тако да 
можемо да изаберемо најбољи расположиви модел и употребимо га у експлоатацији. Подаци за тренинг 
се у принципу стално прикупљају, па се и тренинзи над све већим и квалитетнијим скуповима података 
стално извршавају. Када се добије успешнији модел, претходни модел који је до тада експлоатисан 
се обично веома једноставно замењује новим, бољим.


Видови машинског учења
----------------------

Многобројне поступке машинског учења можемо грубо да разврстамо у две велике групе, које 
називамо ненадгледано учење (енгл. unsupervised learning) и надгледано учење (енгл. supervised 
learning). Многи аутори као трећи начин учења помињу и учење поткрепљивањем (енгл. reinforcement 
learning). У свим овм облицима учења подразумевамо да смо изворне податке трансформисали у 
низове нумеричких својстава, па сваки податак можемо да замислимо као тачку у вишедимензионом 
простору.

|

**Ненадгледано учење**, или учење без надзора, функционише тако што се систему за учење предочи 
велики број примера, а систем анализира дате податке и проналази различите правилности у њима. На основу 
пронађених правилности (образаца, патерна), овакав систем може, на пример, да научи да сличне улазне 
податке (блиске тачке у хиперпростору) групише хијерархијски, или око одређених центара, или на неки 
други начин. 

Примене груписања података (енгл. datra clustering), односно откривања сличности међу подацима обухватају:

- сегментирање корисника, које омогућава предузећима да препознају типове својих корисника, креирају 
  тзв. маркетинг персоне (замишљене типичне представнике група корисника) и тако ефикасније циљају кориснике
- системе препоручивања, који су у стању да на основу обављене куповине предложе друге сличне артикле, који 
  би кориснику могли да буду интересантни (други који су купили то, купили су такође и ово). Овакви системи 
  се нпр. често користе за препоручивање музике, филмова, књига, видео игара и сл.
- откривање плагијаризма, тј. сличности у ауторским делима, научним радовима итд.
- лабелирање нелабелираних података, о којем ће бити више речи нешто касније

Поред набројаних, постоје и многи други проблеми у којима груписање (кластеризација) података из скупа 
за тренинг помаже да се касније нови подаци брзо сврстају у неку од раније препознатих група (кластера). 
Такође, након што се установи образац груписања података, може да се развије систем који на основу 
тога открива и издваја аномалије у подацима. Додатно испитивање тих аномалија доводи до чишћења 
података од грешака, а може да доведе и до откривања атипичних података, који се даље посебно третирају 
у складу са својим значајем у конкретном типу проблема.

Ненадгледано учење се користи и у многим другим доменима, које је заиста тешко систематично побројати. 
Овде можемо само да ради илустрације поменемо још пар разноврсних примера, као што су синтетисање 
говора на основу текста, проналажење оптималних стања (нпр. стање са минимумом енергије), или стварање 
креативног садржаја (компоновање музике, креативно писање, генерисање слика). 

|

**Надгледано учење**, или учење под надзором, се од ненадгледаног разликује по томе што је пре учења 
потребно да човек (или неучећи алгоритам) на улазне податке постави ознаке које представљају жељени 
излаз. Ознаке на подацима називамо и лабеле (од енгл. labels - ознаке, етикете), а за означене податке 
кажемо да су лабелирани. Систем за надгледано учење покушава да научи пресликавање улазних података у 
дате ознаке - лабеле. Постоје две основне варијанте надгледаног учења: класификација и регресија. 

**У проблемима класификације**, ознаке представљају одређене категорије. На пример, 

- медицинске слике унутрашњих органа могу да буду класификоване у две категорије, које представљају 
  слике здравих и оболелих органа
- слике појединачних слова могу да буду класификоване у категорије (класе), које одговарају појединим 
  словима датог писма
- текстуалне поруке могу да буду класификоване у две категорије: жељене и нежељене (спам)

итд. Класификација се користи да одреди којој категорији нешто припада. Програм добија велик број 
примера података које треба да класификује, заједно са ознаком (класом) којој подаци припадају, а 
учи да класификује нове, неозначене податке.

**У проблемима регресије** циљ је да се установи начин на који неки нумерички излаз зависи од улаза, 
односно да се статистички предвиди какве вредности ће имати излаз за другачији улаз. На пример, може 
да нас интересује како број поена на писменом задатку зависи од времена проведеног у учењу, како 
зарада запослених зависи од њиховог образовања, како ће каматне стопе зависити од понуде новца итд. 
Регресиона анализа се и независно од машинског учења широко примењује у предвиђању и прогнозирању 
појава у разним областима, као што су економија, медицина, психологија и друге.

И регресију у класификацију можемо да посматрамо као учење неке функције, тј. пресликавања. У 
класификаицији се улазни подаци пресликавају у дискретне категорије (коначан скуп вредности, често 
само две), док се у регресији улазни подаци пресликавају у непрекидну нумеричку величину.

Постоје разне технике надгледаног учења, а најпопуларније су дрвета одлучивања и неуронске мреже.
Сваки од ових приступа има своје подоблике и може да се даље разврстава.

|

Један од честих разлога због којих неки аналитички модел, добијен надгледаним учењем, може да покаже 
слабе резултате је неодговарајући капацитет за учење, с обзиром на величину скупа за тренинг. На 
пример, када је капацитет за учење превелики у односу на количину расположивих података за тренинг, 
долази до појаве познате под енглеским називом **overfitting**, што бисмо могли да преведемо као 
"претерано уклапање". Систем за учење у неком смислу превише добро научи расположиве податке, односно 
превише добро им се прилагоди (илустровано на следећој слици лево).

.. figure:: ../../_images/overfitting.png
    :align: center
    
    Пример претреаног уклапања у податке (лево) 
    
    и грешака у тестирању или експлоатацији, насталих због тога (десно)

Када систем због недовољно података током тренинга не успе добро да генерализује проблем, касније 
неће бити у стању да добро одговори у случајевима какве није имао прилике да види (претходна слика 
десно). Проблем оверфитовања се у идеалној ситуацији решава обогаћивањем скупа података за учење. Ако 
то није изводљиво, боље је и да се смањи капацитет система да научи дате примере, да би систем боље 
генерализовао будуће инстанце проблема. Након усклађивања капацитета за учење и величине скупа за 
тренинг, систем ће вероватно да има лошије резултате на тренингу, али ће мање да греши касније, на 
тестирању или током експлоатације.

.. figure:: ../../_images/fitting.png
    :align: center
    
    Боља генерализација (лево) доводи до боље касније тачности (десно)

Наравно, могуће је и да систем има недовољан капацитет за учење, а у том случају дешава се недовољно 
уклапање у примере из тренинга (енгл. underfitting). У овом случају обично треба другачије подесити 
тренинг и генерисати већи модел. на жалост, ово захтева и више меморије и процесорског времена за 
тренинг, па то може да постане уско грло.

Другачији проблем настаје када скуп података за тренинг није репрезентативан. То значи да се неки 
типови примера у скупу за тренинг појављују несразмерно ретко у поређењу са њиховом учесталошћу у 
реалној примени. Тада систем не успева да научи одређену подврсту проблема, па касније на таквим 
примерима има слабе резултате (нпр. ако се ситем за детекцију лица тренира само на лицима белаца, 
касније може да греши знатно више при детектовању лица људи црне расе, него што то чини са лицима 
белаца).

|

**Учење поткрепљивањем** је још један облик учења који можемо да запазимо и код људи и животиња. 
У многим ситуацијама у којима човек или животиња предузимају неку акцију, они немају одмах повратну 
информацију о томе колико је та акција била корисна. Повратна информација се добија само повремено, 
у виду награде или казне. При томе се не зна колико је која од појединачних акција допринела таквом 
исходу, већ само да су све оне заједно довеле до тог резултата. Временом, човек и животиња уче која 
понашања су сврсисходна а која не. По овој аналогији са људима и животињама, од система се очекује 
низ одређених акција, без давања повратних информација након сваке појединачне акције. Код учења са 
поткрепљивањем је уобичајено да се уместо израза систем за учење користи реч агент. Као и код овог 
типа учења у природи, тек након целог низа акција агент добија одговор у виду награде или казне. 
Агент је дизајниран да научи да максимизира будућу награду на крају низа активности. То значи да 
он кроз многогобројне покушаје и грешке постепено формира неку стратегију (енгл. policy) избора 
акција у датим ситуацијама, за коју претпоставља да доводи до највеће укупне награде.

Овај начин учења је погодан за играње стратешких игара (нпр. шах). У играма често није јасно који 
потез је добар а који није, али на крају партије агент добија информацију о томе који играч је 
победио, па је та информација његово поткрепљење, тј. награда или казна. На овај начин могу да уче 
и роботи нпр. да се крећу у отежаним околностима, савладавају препреке, да се прикључе на пуњач, и 
слично. Такође, разни системи контроле и управљања могу кроз симулације да науче неку оптималну 
стратегију управљања (нпр. да уз минималан утрошак енергије постигну неки циљ).

Учење са поткрепљивањем се јавља у многобројним варијантама, према конкретном начину на који је 
организован процес учења. Један од изазова који је заједнички разним приступима је да се пронађе 
баланс између истраживања непознатог понашања и коришћења раније откривеног корисног понашања 
(енгл. exploration vs. exploitation).

.. comment


    У теорији рачунарског учења системи за учење се оцењују према рачунској сложености, према сложености узорка 
    (колико је података потребно за успешно учење) или другим параметрима.

    Кратак преглед развоја машинског учења
    --------------------------------------


    Машинско учење (МУ) је један од централних концепата вештачке интелигенције од самог њеног почетка, мада је, као 
    што смо то већ истицали, својеврстан процват и популарност доживело у каснијим фазама развоја вештачке интелигенције.

    Алгоритми машинског учења се користе у широком спектру апликација, као што су у медицини, филтрирању е-поште, препознавању говора и компјутерском виду, где је тешко или неизводљиво развити конвенционалне алгоритме за обављање потребних задатака.[3]

    ... а рачунари постижу све већи успех у решавању оваквих проблема.
    
    Грану вештачке интелигенције засновану на идеји да рачунарски системи могу да уче из података називамо **машинско учење**. 

